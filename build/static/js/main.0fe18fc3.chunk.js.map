{"version":3,"sources":["serviceWorker.ts","history.tsx","components/Home.tsx","components/LogIn.tsx","actions/current.tsx","constants.tsx","components/Account.tsx","components/Register.tsx","components/NotFound.tsx","index.tsx","routes/LoggedInRoute.tsx","routes/LoggedOutRoute.tsx","routes/Pages.tsx","App.tsx","reducers/current.tsx"],"names":["Boolean","window","location","hostname","match","history","createBrowserHistory","Home","mapDispatchToProps","accountLogin","user","dispatch","a","localStorage","getItem","savedusers","usrdata","JSON","parse","index","length","element","email","password","setItem","type","connect","state","React","setFiled","handleUserData","e","currentTarget","id","value","className","onSubmit","preventDefault","name","onChange","Button","variant","href","to","logOutConnect","removeItem","accountUpdate","loggeduserid","savedusersdata","newdata","stringify","console","log","defaultValue","src","identity","alt","onClick","accountAdd","usersdata","Math","random","newuser","push","NotFound","composeEnhancers","Alert","Link","isAuthenticated","Component","component","render","otherProps","Pages","path","exact","LoggIn","Register","Account","height","innerHeight","checkAuthenticationConnect","auth","formattedAuth","app","style","minHeight","compose","store","createStore","action","undefined","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fe18fc3.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:interface-name\nimport { createBrowserHistory } from \"history\";\n\ndeclare global {\n  interface Window {\n    dataLayer: any;\n  }\n}\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import * as React from \"react\";\n\nconst Home = () => (\n  <p>Logged in home page</p>\n);\n\nexport default Home;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from 'react-bootstrap';\nimport { logIn } from \"../actions/current\";\nimport { ICurrent, AUser } from \"../types\";\nimport { Link } from \"react-router-dom\";\n\ninterface IProps {\n  accountLogin: (user: AUser | any) => void;\n  state: ICurrent\n}\n\nconst LoggIn = ({\n  accountLogin,\n  state\n}: IProps) => {\n  const [user, setFiled] = React.useState<AUser | {}>()\n  const handleUserData = (e: React.FormEvent<HTMLInputElement>) => {\n    setFiled({\n      ...user,\n      [e.currentTarget.id]: e.currentTarget.value,\n    });\n  }\n\n  const loginUserAccount = (e: React.FormEvent) => {\n    e.preventDefault();\n    accountLogin(user);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-4 mx-auto\">\n          <div className=\"text-center bbox-title border\" >\n            <h4>Login.</h4>\n            <small>Enter your login details.</small>\n          </div>\n          <div className=\"bbox-box border\">\n            <form onSubmit={loginUserAccount} >\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Email address</label>\n                <input type=\"email\" name=\"email\" id=\"email\" onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Password</label>\n                <input type=\"password\" name=\"password\" id=\"password\" onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <button type=\"submit\" className=\"btn btn-success\" >Login</button>\n              <Button variant=\"danger\" type=\"button\" href=\"/register\" className=\"float-right\" >\n                Register\n              </Button>\n            </form>\n          </div>\n          <div className=\"container\" >\n            <Link to=\"/\" >{'< '} Home </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  accountLogin: logIn\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(LoggIn);\n","import { ThunkDispatch as Dispatch } from \"redux-thunk\";\n\nimport * as constants from \"../constants\";\nimport { AUser } from \"../types\";\n\nexport interface IAuthenticate {\n  type: constants.AUTHENTICATE;\n}\n\nfunction authenticate(): IAuthenticate {\n  return {\n    type: constants.AUTHENTICATE,\n  };\n}\n\nexport interface IUnauthenticate {\n  type: constants.UNAUTHENTICATE;\n}\n\nfunction unauthenticate(): IUnauthenticate {\n  return {\n    type: constants.UNAUTHENTICATE,\n  };\n}\n\nexport type AuthenticationAction = IAuthenticate | IUnauthenticate;\n\nexport function logIn(user: AUser) {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    const savedusers = await window.localStorage.getItem(\"usersdata\");\n    const usrdata = typeof savedusers === \"string\" ?\n      JSON.parse(savedusers) :\n      null;\n\n    if(usrdata){\n      for (let index = 0; index < usrdata.length; index++) {\n        const element = JSON.parse(usrdata[index]);\n        if(element.email === user.email && element.password === user.password){\n          await window.localStorage.setItem(\"authenticated\", \"true\");\n          await window.localStorage.setItem(\"loggeduserid\", element.email);\n          dispatch(authenticate())\n        }\n      }\n    }\n  }\n}\n\nexport function logOut() {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    await window.localStorage.setItem(\"authenticated\", \"false\");\n    await window.localStorage.removeItem(\"loggeduserid\");\n    dispatch(unauthenticate());\n  };\n}\n\nexport function updateAccount(user: AUser) {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    const savedusers = await window.localStorage.getItem(\"usersdata\");\n    const loggeduserid = await window.localStorage.getItem(\"loggeduserid\");\n    const savedusersdata = typeof savedusers === \"string\" ?\n      JSON.parse(savedusers) :\n      null;\n\n    if(savedusersdata){\n      for (let index = 0; index < savedusersdata.length; index++) {\n        var element = JSON.parse(savedusersdata[index]);\n        if(element.email === loggeduserid){\n          var newdata = {\n            ...user\n          }\n          savedusersdata[index] = JSON.stringify(newdata);\n        }\n      }\n    }\n    await window.localStorage.setItem(\"usersdata\", JSON.stringify(savedusersdata));\n  };\n}\n\nexport function addAccount(user: AUser) {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    const savedusers = await window.localStorage.getItem(\"usersdata\");\n    const savedusersdata = typeof savedusers === \"string\" ?\n      JSON.parse(savedusers) :\n      null;\n\n    var usersdata = [];\n    if(savedusersdata){\n      usersdata = savedusersdata;\n    }\n    user.id = Math.random();\n    var newuser = JSON.stringify(user);\n    usersdata.push(newuser);\n    await window.localStorage.setItem(\"usersdata\", JSON.stringify(usersdata));\n  };\n}\n\nexport function getAccount(user: AUser) {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    const savedusers = await window.localStorage.getItem(\"usersdata\");\n    const savedusersdata = typeof savedusers === \"string\" ?\n      JSON.parse(savedusers) :\n      null;\n\n    var usersdata = [];\n    if(savedusersdata){\n      usersdata = savedusersdata;\n    }\n    var newuser = JSON.stringify(user);\n    usersdata.push(newuser);\n    await window.localStorage.setItem(\"usersdata\", JSON.stringify(usersdata));\n  };\n}\n\nexport function checkAuthentication() {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    const auth = await window.localStorage.getItem(\"authenticated\");\n    const formattedAuth = typeof auth === \"string\" ?\n      JSON.parse(auth) :\n      null;\n\n    formattedAuth ? dispatch(authenticate()) : dispatch(unauthenticate());\n  };\n}\n","export const AUTHENTICATE = \"AUTHENTICATE\";\nexport type AUTHENTICATE = typeof AUTHENTICATE;\n\nexport const UNAUTHENTICATE = \"UNAUTHENTICATE\";\nexport type UNAUTHENTICATE = typeof UNAUTHENTICATE;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from 'react-bootstrap';\nimport { logOut, updateAccount } from \"../actions/current\";\nimport { ICurrent, AUser } from \"../types\";\nimport { Link } from \"react-router-dom\";\n\ninterface IProps {\n  logOutConnect: () => void;\n  accountUpdate: (user: AUser | any) => void;\n  state: ICurrent\n}\n\nconst Account = ({\n  logOutConnect,\n  accountUpdate,\n  state,\n}: IProps) => {\n  const [user, setFiled] = React.useState<AUser | {}>()\n  const handleUserData = (e: React.FormEvent<HTMLInputElement>) => {\n    setFiled({\n      ...user,\n      [e.currentTarget.id]: e.currentTarget.value,\n    })\n  }\n\n  const updateUserAcount = (e: React.FormEvent) => {\n    e.preventDefault()\n    console.log('user', user);\n    accountUpdate(user)\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-4 mx-auto\">\n          <div className=\"text-center bbox-title border\" >\n            <h4>Account</h4>\n            <small>Below your details, you can update.</small>\n          </div>\n          <div className=\"bbox-box border\">\n            <form onSubmit={updateUserAcount} >\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Full Name</label>\n                <input type=\"text\" name=\"name\" id=\"name\" defaultValue={state.user.name} onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Email address</label>\n                <input type=\"email\" name=\"email\" id=\"email\" defaultValue={state.user.email} onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Password</label>\n                <input type=\"password\" name=\"password\" id=\"password\" defaultValue={state.user.password} onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Passport / Identity Card </label>\n                <div className=\"form-file\">\n                  <img src={state.user.identity} alt=\"Identity\" className=\"identity\" />\n                  <input id=\"identity\" type=\"file\" name=\"identity\" onChange={handleUserData} className=\"form-control-file\" />\n                </div>\n              </div>\n              <button type=\"submit\" className=\"btn btn-success\">Update</button>\n              <Button variant=\"danger\" type=\"button\" onClick={logOutConnect} className=\"float-right\" >Logout</Button>\n            </form>\n          </div>\n          <div className=\"container\" >\n            <Link to=\"/\" >{'< '} Home </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: ICurrent) => ({\n  state\n});\n\nconst mapDispatchToProps = {\n  logOutConnect: logOut,\n  accountUpdate: updateAccount\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Account);\n\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from 'react-bootstrap';\nimport { addAccount } from \"../actions/current\";\nimport { ICurrent, AUser } from \"../types\";\nimport { Link } from \"react-router-dom\";\nimport history from \"../history\";\n\ninterface IProps {\n  accountAdd: (user: AUser | any) => void;\n  state: ICurrent\n}\n\nconst Register = ({\n  accountAdd,\n  state\n}: IProps) => {\n  const [user, setFiled] = React.useState<AUser | {}>()\n  const handleUserData = (e: React.FormEvent<HTMLInputElement>) => {\n    setFiled({\n      ...user,\n      [e.currentTarget.id]: e.currentTarget.value,\n    });\n  }\n\n  const addUserAccount = (e: React.FormEvent) => {\n    e.preventDefault()\n    console.log('user', user);\n    accountAdd(user);\n    history.push(\"/\");\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-4 mx-auto\">\n          <div className=\"text-center bbox-title border\" >\n            <h4>Register</h4>\n            <small>Please enter the details below.</small>\n          </div>\n          <div className=\"bbox-box border\">\n            <form onSubmit={addUserAccount} >\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Full Name</label>\n                <input type=\"text\" name=\"name\" id=\"name\" onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Email address</label>\n                <input type=\"email\" name=\"email\" id=\"email\" onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Password</label>\n                <input type=\"password\" name=\"password\" id=\"password\" onChange={handleUserData} className=\"form-control\" />\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\" >Passport / Identity Card </label>\n                <div className=\"form-file\">\n                  <input id=\"identity\" type=\"file\" name=\"identity\" onChange={handleUserData} className=\"form-control-file\" />\n                </div>\n              </div>\n              <button type=\"submit\" className=\"btn btn-success\">Register</button>\n              <Button variant=\"danger\" type=\"button\" href=\"/login\" className=\"float-right\" >\n                Login\n              </Button>\n            </form>\n          </div>\n          <div className=\"container\" >\n            <Link to=\"/\" >{'< '} Home </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  accountAdd: addAccount\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(Register);\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nfunction NotFound() {\n  return (\n    <div className=\"container\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-4 mx-auto\">\n          <div className=\"text-center bbox-title border\" >\n            <h4>Not found</h4>\n          </div>\n          <div className=\"bbox-box border\">\n            <Alert variant=\"danger\" >\n              Sorry, the page you are looking for in not found, you can <br></br><Alert.Link href=\"/\">Go back to home page</Alert.Link>.\n            </Alert>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk-recursion-detect\";\nimport currentReducer from \"./reducers/current\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ICurrent } from \"./types\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\n\nlet composeEnhancers;\n\nif ( process.env.NODE_ENV !== \"production\" && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n} else {\n  composeEnhancers = compose;\n}\n\nconst store = createStore<ICurrent, any, any, any>(\n  currentReducer,\n  undefined,\n  composeEnhancers(applyMiddleware(thunkMiddleware)),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\n\nimport history from \"../history\";\nimport { ICurrent } from \"../types\";\n\ninterface IProps {\n  exact?: boolean;\n  isAuthenticated: boolean | null;\n  path: string;\n  component: React.ComponentType<any>;\n}\n\nconst LoggedInRoute = ({\n  component: Component,\n  isAuthenticated,\n  ...otherProps\n}: IProps) => {\n  if (isAuthenticated === false) {\n    history.push(\"/\");\n  }\n\n  return (\n    <>\n      <Route\n        render={otherProps => (\n          <>\n            <Component {...otherProps} />\n          </>\n        )}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state: ICurrent) => ({\n  isAuthenticated: state.isAuthenticated\n});\n\nexport default connect(\n  mapStateToProps\n)(LoggedInRoute);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\n\nimport history from \"../history\";\nimport { ICurrent } from \"../types\";\n\ninterface IProps {\n  exact?: boolean;\n  isAuthenticated: boolean | null;\n  path: string;\n  component: React.ComponentType<any>;\n}\n\nconst LoggedOutRoute = ({\n  component: Component,\n  isAuthenticated,\n  ...otherProps\n}: IProps) => {\n  if (isAuthenticated === true) {\n    history.push(\"/account\");\n  }\n\n  return (\n    <>\n      <Route\n        render={otherProps => (\n          <>\n            <Component {...otherProps} />\n          </>\n        )}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state: ICurrent) => ({\n  isAuthenticated: state.isAuthenticated\n});\n\nexport default connect(\n  mapStateToProps\n)(LoggedOutRoute);\n","import * as React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Home from \"../components/Home\";\nimport LoggIn from \"../components/LogIn\";\nimport Account from \"../components/Account\";\nimport Register from \"../components/Register\";\nimport NotFound from \"../components/NotFound\";\nimport LoggedInRoute from \"../routes/LoggedInRoute\";\nimport LoggedOutRoute from \"../routes/LoggedOutRoute\";\n\nconst Pages = () => {\n  return (\n    <Switch>\n      <LoggedOutRoute path=\"/\" exact={true} component={LoggIn} />\n      <LoggedOutRoute path=\"/register\" exact={true} component={Register} />\n      <LoggedInRoute path=\"/account\" exact={true} component={Account} />\n      <LoggedInRoute path=\"/home\" exact={true} component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n};\n\nexport default Pages;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Router } from \"react-router-dom\";\nimport history from \"./history\";\nimport Pages from \"./routes/Pages\";\nimport { checkAuthentication } from \"./actions/current\";\nimport { ICurrent } from \"./types\";\nimport \"./index.css\";\n\nconst { innerHeight: height } = window;\n\ninterface IProps {\n  checkAuthenticationConnect: () => void;\n  isAuthenticated: boolean | null;\n}\n\nconst App = ({\n  checkAuthenticationConnect,\n  isAuthenticated\n}: IProps) => {\n  React.useEffect(() => {\n    checkAuthenticationConnect();\n  }, []);\n\n  const app = isAuthenticated !== null ? (\n    <Router history={history}>\n      <Route component={Pages} />\n    </Router>\n  ) : null;\n\n  return (\n    <div className=\"App\" style={{minHeight:height}} >\n      {app}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: ICurrent) => ({\n  isAuthenticated: state.isAuthenticated\n});\n\nconst mapDispatchToProps = {\n  checkAuthenticationConnect: checkAuthentication\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import { IAuthenticate, IUnauthenticate } from \"../actions/current\";\nimport { AUTHENTICATE, UNAUTHENTICATE } from \"../constants\";\nimport { ICurrent } from \"../types\";\n\nexport default function currentReducer(\n  state: ICurrent = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      password: '',\n      identity: ''\n    },\n    isAuthenticated: null,\n  },\n  action: IAuthenticate | IUnauthenticate,\n): ICurrent {\n  switch (action.type) {\n    case AUTHENTICATE:\n      const savedusers = window.localStorage.getItem(\"usersdata\");\n      const loggeduserid = window.localStorage.getItem(\"loggeduserid\");\n      const usrdata = typeof savedusers === \"string\" ? JSON.parse(savedusers) : null;\n      if(usrdata){\n        for (let index = 0; index < usrdata.length; index++) {\n          const element = JSON.parse(usrdata[index]);\n          if(element.email === loggeduserid){\n            return {\n              user: {\n                id: element.id,\n                name: element.name,\n                email: element.email,\n                password: element.password,\n                identity: element.identity\n              },\n              isAuthenticated: true\n            }\n          }\n        }\n      }\n    // eslint-disable-next-line no-fallthrough\n    case UNAUTHENTICATE:\n      return {\n        user: {\n          id: 0,\n          name: '',\n          email: '',\n          password: '',\n          identity: ''\n        },\n        isAuthenticated: false,\n      }\n  }\n  return state;\n}\n"],"sourceRoot":""}